import { app, BrowserWindow, ipcMain } from 'electron';
import { Session, Conversation } from './../models/chat'
import { runTests } from './tester';

import * as sessionHandler from './modules/storage/sessionService'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

app.whenReady().then(async () => {
  
  //session IPC
  ipcMain.handle('session:list', async () => {
    return await sessionHandler.listSessions();
  });
  ipcMain.handle('session:getActive', async () => {
    return await sessionHandler.getLastActiveSession();
  })
  ipcMain.handle('session:create', async () => {
    return await sessionHandler.createSession();
  })

  //conversation IPC
  ipcMain.handle('conversation:create', async (_, sessionId: string): Promise<Conversation> => {
  return sessionHandler.createConversation(sessionId);
  });

  ipcMain.handle('conversation:read', async (_, sessionId: string, conversationId: string): Promise<Conversation> => {
    return sessionHandler.readConversation(sessionId, conversationId);
  });

  ipcMain.handle('conversation:update', async (_, sessionId: string, conversation: Conversation): Promise<Session> => {
    return sessionHandler.writeConversation(sessionId, conversation); // Reuse existing write logic
  });

  ipcMain.handle('conversation:list', async (_, sessionId: string): Promise<Conversation[]> => {
    return sessionHandler.listConversations(sessionId);
  });

  ipcMain.handle('conversation:setActive', async (_, sessionId: string, conversationId: string): Promise<Session> => {
    return sessionHandler.setActiveConversation(sessionId, conversationId);
  });

  createWindow();

  //await runTests();
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
